#!/usr/bin/with-contenv bash
# shellcheck shell=bash disable=SC1008
set -e

if [ -z "${CI_SERVER_URL}" ]; then
	echo "Missing Required environment variable: '\$CI_SERVER_URL'"
	exit 1
fi

WAIT_GITLAB_TIMEOUT=${WAIT_GITLAB_TIMEOUT:-${GITLAB_TIMEOUT:-300}}

# First we need to wait for a connection to GitLab
#
# The 15-wait-for-internet should have taken care of this. We can simple check
# this by verifying if the environment var WAIT_INET_ADDR equals
# the CI_SERVER_URL because this should be the default.
#
# If this is not the case when we will first go and wait till we will be able
# to connect to gitlab before we can check if the gitlab is ready.
#
# Reason for checking, gitlab my still be in booting / startup stage
if [ "${WAIT_INET_ADDR}" != "${CI_SERVER_URL}" ]; then

	# We are facing the issue that the user selected a different verification
	# address then the CI_SERVER_URL. Now we must check if gitlab is reachable.
	#
	# Loop until an active internet connection is established to gitlab
	echo -n "  waiting for GitLab to be online"
	until curl --max-time "${WAIT_GITLAB_TIMEOUT}" -s -o /dev/null "${CI_SERVER_URL}"; do
		# Sleep to allow cooldown
		echo -n "."
		sleep 10
	done
	echo " [connected]"
fi

echo -n "  Waiting for GitLab to be ready"
until curl -I -sL -w '%{http_code}\n' --max-time 60 -o /dev/null "${CI_SERVER_URL}" -ne 200; do
	WAIT_GITLAB_TIMEOUT=$((WAIT_GITLAB_TIMEOUT - 10))
	if [[ ${WAIT_GITLAB_TIMEOUT} -eq 0 ]]; then
		echo " [TIMEOUT]"
		exit 1
	fi
	echo -n "."
	sleep 10
done
echo " [READY]"
